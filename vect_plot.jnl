\cancel mode verify

!**************************************************************
! Description: plot over vectors 
!
! Usage: go vect_plot xpos ypos u v [skip=1] [fill] [POLYGON qualifiers] [arrow size head=30] [arrow head angle=30]
!
! Notes:  
!  * xpos = horizontal starting position of the vector 
!    ypos = vertical starting position of the vector 
!    u = horizontal vector component
!    v = vertical vector component
!  * xpos, ypos, u, v can be either vectors or arrays
!  * The vector scale depends on the plot scale 
!  * ($XAXIS_MIN),($XAXIS_MAX),($YAXIS_MIN),($YAXIS_MAX)
!  should be defined; if not you can force then to be defined
!  with qualifiers hlimits and vlimits
!  * Arrow size head is expressed in percent of size of the vector
!
! Example: 
!  yes? let XPOS = {50,130,240,300,140,90,200,210,110,70}
!  yes? let YPOS = {10,-50,40,20,-10,0,40,70,-35,50}
!  yes? let U = {10,3,-12,8,15,6,-8,9,17,-8}
!  yes? let V = {-3,5,7,2,-3,10,-15,11,9,-12}
!  yes? go vect_plot XPOS YPOS U V " " fill 
!
! Calls:
!
! Author: Patrick Brockmann
! Contact: Patrick.Brockmann@ipsl.jussieu.fr
! History:
! Modification:
!
!**************************************************************

query/ignore $1%<Usage: go vect_plot xpos ypos u v [skip=1] [fill] [POLYGON qualifiers] [arrow size head=30] [arrow head angle=30]%
query/ignore $2%<Usage: go vect_plot xpos ypos u v [skip=1] [fill] [POLYGON qualifiers] [arrow size head=30] [arrow head angle=30]% 
query/ignore $3%<Usage: go vect_plot xpos ypos u v [skip=1] [fill] [POLYGON qualifiers] [arrow size head=30] [arrow head angle=30]% 
query/ignore $4%<Usage: go vect_plot xpos ypos u v [skip=1] [fill] [POLYGON qualifiers] [arrow size head=30] [arrow head angle=30]% 

if `$5%1% lt 1` then
   message/continue Error\! Must have option skip > 0
   exit
endif

if $7"false|*>true" then
   define symbol ME_QUALIFIERS = /hlim=\`ME_xpos[i=@min]\`:\`ME_xpos[i=@max]\`/vlim=\`ME_ypos[i=@min]\`:\`ME_ypos[i=@max]\`$7
else
   define symbol ME_QUALIFIERS = /hlim=\`ME_xpos[i=@min]\`:\`ME_xpos[i=@max]\`/vlim=\`ME_ypos[i=@min]\`:\`ME_ypos[i=@max]\`
endif

!**************************************************************
let ME_PI = atan(1.)*4.
let ME_DEG2RAD = ME_PI/180.

!**************************************************************
let ME_xpos=xsequence(($1))
let ME_ypos=xsequence(($2))
let ME_u=xsequence(($3))
let ME_v=xsequence(($4))

!**************************************************************
! line will not appear since 1 pt defined
! plot a base axis (define ($XAXIS_MIN),($XAXIS_MAX),($YAXIS_MIN),($YAXIS_MAX))
plot/vs/nolab/line($ME_QUALIFIERS) 0,-100

!**************************************************************
def sym ME_nbvectors=`ME_u,return=iend`
!say `($ME_nbvectors)`

!-----------------------
! Select 1 vector on $5 (default = all)
let ME_select0=mod(i[i=1:($ME_nbvectors)]-1,`$5%1%`) + 1 
let ME_select1=if ME_select0 eq 1 then 1

let ME_u1 = ME_u * ME_select1
let ME_v1 = ME_v * ME_select1
let ME_xpos1 = ME_xpos * ME_select1
let ME_ypos1 = ME_ypos * ME_select1

!-----------------------
! take into account ratio (= ratioworld * ratioviewp)
! to respect in every case the head angle choosen 
!-----------------------
def sym ME_ratioworld = `((($YAXIS_MAX))-(($YAXIS_MIN)))/((($XAXIS_MAX))-(($XAXIS_MIN)))`
def sym ME_ratioviewp = `($PPL$XLEN)/($PPL$YLEN)`
def sym ME_ratio = `($ME_ratioworld)*($ME_ratioviewp)`
!say ($ME_ratioworld) ($ME_ratioviewp) ($ME_ratio) 

!-----------------------
! vector points
!           e 
!         / | \
!        a -|- b
!           | 
!           | 
!           | 
!           s 
!-----------------------
def sym ME_head_size = `($08%30%)/100`          ! in percentage
let ME_head_angle = ($09%30%)*ME_DEG2RAD            ! in degrees
let ME_size = ($ME_head_size) * (ME_u1^2 + (ME_v1/($ME_ratio))^2)^.5
let ME_alpha = atan2(ME_v1/($ME_ratio),ME_u1)

!-- point a
let ME_headxpos_a0 = cos(ME_alpha - ME_head_angle) * ME_size * 1/cos(ME_head_angle)
let ME_headypos_a0 = sin(ME_alpha - ME_head_angle) * ME_size * 1/cos(ME_head_angle)

let ME_headxpos_a1 = ME_xpos1 + ME_u1 - ME_headxpos_a0  
let ME_headypos_a1 = ME_ypos1 + ME_v1 - ME_headypos_a0 * ($ME_ratio) 

!-- point b
let ME_headxpos_b0 = sin(ME_alpha + ME_head_angle - ME_PI/2.) * ME_size * 1/cos(ME_head_angle)
let ME_headypos_b0 = cos(ME_alpha + ME_head_angle - ME_PI/2.) * ME_size * 1/cos(ME_head_angle)

let ME_headxpos_b1 = ME_xpos1 + ME_u1 + ME_headxpos_b0 
let ME_headypos_b1 = ME_ypos1 + ME_v1 - ME_headypos_b0 * ($ME_ratio)

!-- make the polygon vectors 
let ME_dum = ME_u*0 + j[j=1:6]

!-----------------------
! normal vectors or filled head vectors
if $6%false|fill>true|*>false% then

  ! head filled in black
  !-- gather points (pt_s--pt_e--pt_a--pt_b--pt_e--pt_s) 
  let ME_headxpos0 = if ME_dum eq 1 then ME_xpos1 else ME_dum
  let ME_headxpos1 = if ME_dum eq 2 then ME_xpos1+ME_u1 else ME_headxpos0
  let ME_headxpos2 = if ME_dum eq 3 then ME_headxpos_a1 else ME_headxpos1
  let ME_headxpos3 = if ME_dum eq 4 then ME_headxpos_b1 else ME_headxpos2
  let ME_headxpos4 = if ME_dum eq 5 then ME_xpos1+ME_u1 else ME_headxpos3
  let ME_headxpos5 = if ME_dum eq 6 then ME_xpos1 else ME_headxpos4

  let ME_headypos0 = if ME_dum eq 1 then ME_ypos1 else ME_dum
  let ME_headypos1 = if ME_dum eq 2 then ME_ypos1+ME_v1 else ME_headypos0
  let ME_headypos2 = if ME_dum eq 3 then ME_headypos_a1 else ME_headypos1
  let ME_headypos3 = if ME_dum eq 4 then ME_headypos_b1 else ME_headypos2
  let ME_headypos4 = if ME_dum eq 5 then ME_ypos1+ME_v1 else ME_headypos3
  let ME_headypos5 = if ME_dum eq 6 then ME_ypos1 else ME_headypos4

  polygon/over/nokey/nolab/pal=black/line/fill ME_headxpos5, ME_headypos5, i[i=1:($ME_nbvectors)] 

else

  ! normal vectors
  !-- gather points (pt_s--pt_e--pt_a--pt_e--pt_b--pt_e) 
  let ME_headxpos0 = if ME_dum eq 1 then ME_xpos1 else ME_dum
  let ME_headxpos1 = if ME_dum eq 2 then ME_xpos1+ME_u1 else ME_headxpos0
  let ME_headxpos2 = if ME_dum eq 3 then ME_headxpos_a1 else ME_headxpos1
  let ME_headxpos3 = if ME_dum eq 4 then ME_xpos1+ME_u1 else ME_headxpos2
  let ME_headxpos4 = if ME_dum eq 5 then ME_headxpos_b1 else ME_headxpos3
  let ME_headxpos5 = if ME_dum eq 6 then ME_xpos1+ME_u1 else ME_headxpos4

  let ME_headypos0 = if ME_dum eq 1 then ME_ypos1 else ME_dum
  let ME_headypos1 = if ME_dum eq 2 then ME_ypos1+ME_v1 else ME_headypos0
  let ME_headypos2 = if ME_dum eq 3 then ME_headypos_a1 else ME_headypos1
  let ME_headypos3 = if ME_dum eq 4 then ME_ypos1+ME_v1 else ME_headypos2
  let ME_headypos4 = if ME_dum eq 5 then ME_headypos_b1 else ME_headypos3
  let ME_headypos5 = if ME_dum eq 6 then ME_ypos1+ME_v1 else ME_headypos4

  polygon/over/nokey/nolab/line ME_headxpos5, ME_headypos5, i[i=1:($ME_nbvectors)] 

endif
!-----------------------

!**************************************************************
cancel sym ME_*
cancel var ME_* 

!**************************************************************
set mode/last verify
