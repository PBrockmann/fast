\cancel mode verify

!**************************************************************
! Description: Maps a 2D variable by representing model cells 
!  as filled polygons using information from the model grid file
!  as defined in netCDF and GDT conventions
!
! Usage: go map_cylin2 GRID CENTRAL_MERIDIAN 2DVAR [POLYGON qualifiers] [polygons file] [IJ limits]
!
! Example: go -h map_cylin2
!
! Notes:
!  * Variables that must be present are: lon, lat, bounds_lon, bounds_lat
!  * Projection used is cylindrical
!  * If polygons file specified, overlay of continents are made using
!  the same argument CM
!  * If IJ limits are specified, 2D var must be expressed accordingly 
!  ex: go map_cylin2 ORCA4.0 0 mask[i=57:73,j=45,d=ORCA4.0_grid.nc,k=1] " " /line " " "i=57:73,j=45"
!  * IJ limits must be included between " "
!  * Use ppl set to define an empty symbol (not possible with def symbol)
!  * xsequence(VAR) is used with return=size because return option doesn't take
!  in consideration operators (see err550_size.jnl)
!  * map_cylin and map_cylin2 differ in the way that map_cylin2 does not
!  set ratio and margins of the map which sould be set previously by a call 
!  to go margins_set 
!  * change to avoid `var[d=file.nc],return=size` by `xsequence(var[d=file.nc]),return=isize`
!  (see bug err600_returnsize.jnl)
!
! Calls: go unlabels
!        go cont_cylin
!        
! Author: Patrick Brockmann 
! Contact: Patrick.Brockmann@ipsl.jussieu.fr  
! History:
! Modification:
!
!**************************************************************

!**************************************************************
! Check arguments 
!**************************************************************
if $1"false|-h>true|*>false" then 
   message/continue 
   message/continue *********************************
   message/continue Usage:
   message/continue go map_cylin2 GRID CENTRAL_MERIDIAN 2DVAR [POLYGON qualifiers] [polygons file] [IJ limits]
   message/continue
   message/continue Arguments:
   message/continue GRID = Grid name (IPSL,IPSL.DM2,NCAR,MPIM...) or COARDS
   message/continue CENTRAL_MERIDIAN = [0:360]
   message/continue 2DVAR
   message/continue 
   message/continue Option:
   message/continue POLYGON qualifiers = /LINE/NOLABEL/LEVELS/PALETTE/HLIMITS/VLIMITS/TITLE/PATTERN/KEY/NOKEY
   message/continue polygons file = specify xxxxx to use an existing polygon file named polydouble_xxxxx.nc 
   message/continue IJ limits = limitation on I or/and J (ex: "I=30:45,J=50:56") 
   message/continue
   message/continue Examples:
   message/continue use "IPSL_CFC_1990.nc"
   message/continue go map_cylin2 IPSL 0 CFC11[k=1,l=1]
   message/continue go map_cylin2 IPSL 0 CFC11[k=1,l=1] " " /line
   message/continue go map_cylin2 IPSL 220 CFC11[k=1,l=1] " " /levels=(1.E-9,5.E-9,.25E-9)
   message/continue go map_cylin2 IPSL 0 1E9*CFC11[k=1,l=1] " " /hlimits=10:90:10/vlimits=-30:30:10/title="Concentration of CFC11 in mol/l"
   message/continue *********************************
   message/continue 
   exit
endif

query/ignore $1%<Usage: go map_cylin2 GRID CENTRAL_MERIDIAN 2DVAR [POLYGON qualifiers] [polygons file] [IJ limits]%
query/ignore $2%<Usage: go map_cylin2 GRID CENTRAL_MERIDIAN 2DVAR [POLYGON qualifiers] [polygons file] [IJ limits]%
query/ignore $3%<Usage: go map_cylin2 GRID CENTRAL_MERIDIAN 2DVAR [POLYGON qualifiers] [polygons file] [IJ limits]%

!**************************************************************
define symbol ME_GRID = $1

let ME_CM = $2
if `$2 lt 0 or $2 gt 360` then                    ! Value in [0:360]
   message/continue CENTRAL_MERIDIAN argument should be in [0:360]
   exit
endif

if $4"false|*>true" then 
   define symbol ME_QUALIFIERS = /fill/hlimits=\`ME_CM-180\`:\`ME_CM+180\`:30/vlimits=-90:90:30$4
else 
   define symbol ME_QUALIFIERS = /fill/hlimits=\`ME_CM-180\`:\`ME_CM+180\`:30/vlimits=-90:90:30
endif

if $6"false|*>true" then
   if ($ME_GRID%|COARDS>true|*>false%) then
      define symbol ME_IJD = $6
   else
      define symbol ME_IJD = $6,D=($ME_GRID)_grid.nc
   endif
else
   if ($ME_GRID%|COARDS>true|*>false%) then
      ppl set ME_IJD  
   else
      define symbol ME_IJD = D=($ME_GRID)_grid.nc 
   endif
endif

set data/save

!**************************************************************
! Prepare Longitude and Latitude vectors from the model grid
! They represent the  polygon corners of each cell of the model grid 
!**************************************************************

if ($ME_GRID%|COARDS>true|*>false%) then

!------------------------------------------
! lon,lat,bounds_lon,bounds_lat are retrieved from the self-described COARDS conventions netCDF variable 
!------------------------------------------
let ME_VAR = $3 

let LON=x[gx=ME_VAR]*y[gy=ME_VAR]*0+x[gx=ME_VAR]
let LAT=x[gx=ME_VAR]*y[gy=ME_VAR]*0+y[gy=ME_VAR]

let ME_BOXLON=x[gx=ME_VAR]*y[gy=ME_VAR]*0+xbox[gx=ME_VAR]
let ME_DUMMY_BOXLON1=x[gx=ME_VAR]*y[gy=ME_VAR]*0+k[k=1:2]+l[l=1:2]*2
let ME_DUMMY_BOXLON2=if ME_DUMMY_BOXLON1 EQ 3 then LON-ME_BOXLON/2 else ME_DUMMY_BOXLON1
let ME_DUMMY_BOXLON3=if ME_DUMMY_BOXLON1 EQ 4 then LON+ME_BOXLON/2 else ME_DUMMY_BOXLON2 
let ME_DUMMY_BOXLON4=if ME_DUMMY_BOXLON1 EQ 5 then LON-ME_BOXLON/2 else ME_DUMMY_BOXLON3
let BOUNDS_LON=if ME_DUMMY_BOXLON1 EQ 6 then LON+ME_BOXLON/2 else ME_DUMMY_BOXLON4

let ME_BOXLAT=x[gx=ME_VAR]*y[gy=ME_VAR]*0+ybox[gy=ME_VAR]
let ME_DUMMY_BOXLAT1=x[gx=ME_VAR]*y[gy=ME_VAR]*0+k[k=1:2]+l[l=1:2]*2
let ME_DUMMY_BOXLAT2=if ME_DUMMY_BOXLAT1 EQ 3 then LAT-ME_BOXLAT/2 else ME_DUMMY_BOXLAT1
let ME_DUMMY_BOXLAT3=if ME_DUMMY_BOXLAT1 EQ 4 then LAT-ME_BOXLAT/2 else ME_DUMMY_BOXLAT2 
let ME_DUMMY_BOXLAT4=if ME_DUMMY_BOXLAT1 EQ 5 then LAT+ME_BOXLAT/2 else ME_DUMMY_BOXLAT3
let BOUNDS_LAT=if ME_DUMMY_BOXLAT1 EQ 6 then LAT+ME_BOXLAT/2 else ME_DUMMY_BOXLAT4

let ME_SIZE_GRID=`xsequence(LON[($ME_IJD)]),return=isize`

else

!------------------------------------------
! Open the GDT conventions grid file
!------------------------------------------

use "($ME_GRID)_grid.nc"
set data/restore

let ME_SIZE_GRID=`xsequence(LON[($ME_IJD)]),return=isize`

!------------------------------------------
endif

!*************************************************
let ME_SIZE_VAR=`xsequence(($3)),return=isize`
if `ME_SIZE_VAR ne ME_SIZE_GRID` then
   message/continue Error\! Variable and grid size must match 
   message/continue Grid     = `ME_SIZE_GRID` points
   message/continue Variable = `ME_SIZE_VAR` points
   if ($ME_GRID%|COARDS>false|*>true%) then cancel data ($ME_GRID)_grid.nc
   set data/restore
   cancel variable ME_*
   cancel symbol ME_*
   exit
endif

!*************************************************
let ME_LON_POS = mod(LON+360*10,360)
let ME_LON_C1 = if ME_LON_POS gt ME_CM+180 then ME_LON_POS-360 else ME_LON_POS
let ME_LON_C = if ME_LON_C1 lt ME_CM-180 then ME_LON_C1+360 else ME_LON_C1

let ME_BOUNDS_LON_POS = mod(BOUNDS_LON+360*10,360)
let ME_BOUNDS_LON_LIM1 = if ME_BOUNDS_LON_POS gt ME_CM+180 then ME_BOUNDS_LON_POS-360 else ME_BOUNDS_LON_POS
let ME_BOUNDS_LON_LIM = if ME_BOUNDS_LON_LIM1 lt ME_CM-180 then ME_BOUNDS_LON_LIM1+360 else ME_BOUNDS_LON_LIM1 

let ME_CLOSEST_LON1 = if abs(ME_BOUNDS_LON_LIM-ME_LON_C) gt abs(ME_BOUNDS_LON_LIM+360-ME_LON_C) then ME_BOUNDS_LON_LIM+360 else ME_BOUNDS_LON_LIM
let ME_CLOSEST_LON = if abs(ME_CLOSEST_LON1-ME_LON_C) gt abs(ME_CLOSEST_LON1-360-ME_LON_C) then ME_CLOSEST_LON1-360 else ME_CLOSEST_LON1

let ME_SLON_LL = ysequence(ME_CLOSEST_LON[K=1,L=1,($ME_IJD)])
let ME_SLON_LR = ysequence(ME_CLOSEST_LON[K=2,L=1,($ME_IJD)])
let ME_SLON_UL = ysequence(ME_CLOSEST_LON[K=1,L=2,($ME_IJD)])
let ME_SLON_UR = ysequence(ME_CLOSEST_LON[K=2,L=2,($ME_IJD)])

let ME_DUMMY_LON1 = ME_SLON_LL*0+I[I=1:4]
let ME_DUMMY_LON2 = if ME_DUMMY_LON1 eq 1 then ME_SLON_LL else ME_DUMMY_LON1
let ME_DUMMY_LON3 = if ME_DUMMY_LON1 eq 2 then ME_SLON_LR else ME_DUMMY_LON2
let ME_DUMMY_LON4 = if ME_DUMMY_LON1 eq 3 then ME_SLON_UR else ME_DUMMY_LON3
let ME_Longitude = if ME_DUMMY_LON1 eq 4 then ME_SLON_UL else ME_DUMMY_LON4

let ME_SLAT_LL = ysequence(BOUNDS_LAT[K=1,L=1,($ME_IJD)])
let ME_SLAT_LR = ysequence(BOUNDS_LAT[K=2,L=1,($ME_IJD)])
let ME_SLAT_UL = ysequence(BOUNDS_LAT[K=1,L=2,($ME_IJD)])
let ME_SLAT_UR = ysequence(BOUNDS_LAT[K=2,L=2,($ME_IJD)])

let ME_DUMMY_LAT1 = ME_SLAT_LL*0+I[I=1:4]
let ME_DUMMY_LAT2 = if ME_DUMMY_LAT1 eq 1 then ME_SLAT_LL else ME_DUMMY_LAT1
let ME_DUMMY_LAT3 = if ME_DUMMY_LAT1 eq 2 then ME_SLAT_LR else ME_DUMMY_LAT2
let ME_DUMMY_LAT4 = if ME_DUMMY_LAT1 eq 3 then ME_SLAT_UR else ME_DUMMY_LAT3
let ME_Latitude = if ME_DUMMY_LAT1 eq 4 then ME_SLAT_UL else ME_DUMMY_LAT4

!*************************************************
let ME_VAL = ysequence(($3))
set variable/title=$3 ME_VAL

!**************************************************************
let ME_X_PAGE = if ME_VAL ne -1E+34 then ME_Longitude
set variable/title=LONGITUDE ME_X_PAGE
let ME_Y_PAGE = if ME_VAL ne -1E+34 then ME_Latitude
set variable/title=LATITUDE ME_Y_PAGE

!**************************************************************
polygon/set_up($ME_QUALIFIERS) ME_X_PAGE,ME_Y_PAGE,ME_VAL

go unlabels 1 8

ppl xfor (I7,''LONE'')          ! set longitude axis labels
ppl yfor (I7,''LAT'')           ! set latitude axis labels

ppl set ME_QUALIFIERS1 $edit(ME_QUALIFIERS,upcase)
ppl set ME_ISLINE $locate("/LINE",ME_QUALIFIERS1)
ppl set ME_ISOVER $locate("/OVER",ME_QUALIFIERS1)

if `($ME_ISLINE) gt 0 and ($ME_ISOVER) gt 0` then
   ppl fillpol/line/fill/over
elif `($ME_ISLINE) gt 0 and ($ME_ISOVER) le 0` then
   ppl fillpol/line/fill
elif `($ME_ISLINE) le 0 and ($ME_ISOVER) gt 0` then
   ppl fillpol/over 
else
   ppl fillpol
endif

!**************************************************************
if ($ME_GRID%|COARDS>true|*>false%) then
   cancel var lon,lat,bounds_lon,bounds_lat
else
   cancel data ($ME_GRID)_grid.nc 
endif
set data/restore

!**************************************************************
! overlay polygons file 
if $5%false|*>true% then
   def sym ME_DUMMY=10 
   go cont_cylin `ME_CM` /over/nolab ($ME_DUMMY) $5
endif

!**************************************************************
cancel variable ME_* 
cancel symbol ME_*

!**************************************************************
set mode/last verify
